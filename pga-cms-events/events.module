<?php

/**
 * @file
 * Contains events.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache\CacheBackendInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_help().
 */
function events_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the events module.
    case 'help.page.events':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Create Events entity') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_toolbar().
 */
function events_toolbar() {
  $items = array();
  $items['events'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'link',
      '#attributes' => array(
        'class' => array('toolbar-icon', 'toolbar-icon-entity-event-entity-collection'),
      ),
    ),
    '#attached' => array('library' => array('events/events.icon'),
    ),
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function events_form_alter(&$form, $form_state, $form_id){
  $tempstore = \Drupal::service('user.private_tempstore')->get('events');
  if($tempstore->get('event_year') !== NULL){
    $event_year = $tempstore->get('event_year');
  }
  if($tempstore->get('event_name') !== NULL ){
    $event_name = $tempstore->get('event_name');
  }

  if ($form_id === 'event_entity_add_form' && isset($event_year) && isset($event_name)) {
    $form['event_title']['widget'][0]['value']['#default_value'] = $event_year . "-" . $event_name;
    $form['event_title']['widget'][0]['value']['#disabled'] = TRUE;
    $form['field_event_meta_name']['widget'][0]['value']['#default_value'] = $event_name;
    //$form['field_event_meta_date']['widget'][0]['value']['#default_value'] = $event_year;
  } else if ($form_id === 'event_entity_add_form'){
    // Redirect to Event Title Form for correct flow.
    $response = new Symfony\Component\HttpFoundation\RedirectResponse('add/title');
    $response->send();
    return;
  } else if ($form_id === 'event_entity_edit_form'){
    $form['event_title']['widget'][0]['value']['#disabled'] = TRUE;
  }

  if ($form_id === 'event_entity_add_form' || $form_id === 'event_entity_edit_form'){
    $user = \Drupal::currentUser();
    if(!$user->hasPermission('administer events')){
      // Access control at the field level.
      $form['field_event_logo']['#access'] = FALSE;
      $form['field_event_header_img']['#access'] = FALSE;
      $form['field_event_footer_img']['#access'] = FALSE;
      $form['field_event_css']['#access'] = FALSE;
      $form['field_ads_poll_interval']['#access'] = FALSE;
      $form['field_feed_poll_interval']['#access'] = FALSE;
      $form['field_sd_env']['#access'] = FALSE;
    }
  }

  if ($form_id === 'event_entity_add_form'){
    $form['field_address_region']['#prefix'] = '<div class="form--inline clearfix"><div>';
    $form['field_address_region']['#suffix'] = '</div>';
    $form['field_postal_code']['#prefix'] = '<div>';
    $form['field_postal_code']['#suffix'] = '</div></div>';
  }

}

/**
 * Implements hook_theme().
 */
function events_theme(){
  $theme['event_entity'] = array(
    'render element' => 'elements',
    'file' => 'event_entity.page.inc',
    'template' => 'event_entity',
  );
  $theme['global_footer'] = array(
    'variables' => array(
        'main_menu' => NULL,
        'footer_link' => NULL,
      ),
      'template' => 'global-footer',
  );

  return $theme;
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function events_taxonomy_term_insert($term){

  // // This is only for when Events module is installed to prevent an error.
  // $route_provider = \Drupal::service('router.route_provider');
  // $route_exists = count($route_provider->getRoutesByNames(['events.config.defaults'])) === 1;
  //
  // /* THIS HAD TO BE REMOVED FOR NOW SINCE IT RUNS WHEN INSTALL ADDS THE DEFAULT VALUES */
  // // After Adding Event_Name term. User gets redirected to set the default year.
  // if($route_exists){
  //   if($term->vid->target_id == "event_name"){
  //     $response = new Symfony\Component\HttpFoundation\RedirectResponse(\Drupal::url('events.config.defaults'));
  //     $response->send();
  //     return;
  //   }
  // }

  // Save Event Years to Cache
  if($term->vid->target_id == "event_year"){
    // Get Cache bin
    $cache = \Drupal::cache('events_cache');
    // Get list of up-to-date terms.
    $event_years = events_get_terms('event_year');
    if($cached_years = $cache->get("event_years_list")) {
      $cached_years->delete('event_years_list');
      $cached_years->set('event_years_list', $event_years, CacheBackendInterface::CACHE_PERMANENT, array('event_years_list'));
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function events_preprocess_page(&$variables){
  // Delete temporay variables if not being used.
  $route = \Drupal::routeMatch()->getRouteName();
  if(($route !== 'entity.events.title_form') && ($route !== 'entity.event_entity.add_form')){
    $tempstore = \Drupal::service('user.private_tempstore')->get('events');
    if($tempstore->get('event_year') !== NULL){
      $tempstore->delete('event_year');
    }
    if($tempstore->get('event_name') !== NULL ){
      $tempstore->delete('event_name');
    }
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $slugs = explode("/", $current_path);
  // Bypass known slugs
  if($slugs[1] === 'admin') {
    return;
  }

  if(isset($slugs[1])){ //

    // Verify slugs and continue
    $verified_slugs = events_verify_slugs($slugs);
    if(isset($verified_slugs['event_slug'])){ // Making sure event_slug is not null
      $event_data = events_get_event($verified_slugs['year_slug'], $verified_slugs['event_slug']);

      
      var_dump($event_data);


    } else {
      return;
    }
  }

}


function events_get_event($year_slug, $event_slug){
  // Get Cache bin
  $cache = \Drupal::cache('events_cache');

  // Get EVENT_CACHE
  $this_cid = ($year_slug === null ? "event-" . $event_slug : "event-" . $year_slug . "-" . $event_slug);
  if ($event_cache = $cache->get($this_cid)) {
    $event_cache_data = $event_cache->data;
  }
  else { // Generate a new CACHE.
    $defaults_data = events_get_event_defaults();
    $event = events_defaults_event_by_slug($defaults_data, $event_slug);
    // Need to generate some EVENT cache and retrieve the data";
    if(isset($year_slug)){
      $event_cache_key = "event-" . $year_slug . "-" . $event_slug;
      $event_year = $year_slug;
      $event_name = (isset($event) ? $event->event_name : null);
      // 'year' exists in url. Setting name.";
    } else {
      // 'year' does not exist in url. Setting both.";
      $event_cache_key = "event-" . $event_slug;
      $event_name = (isset($event) ? $event->event_name : null);
      $event_year = (isset($event) ? $event->default_year : null);
    }

    // Ready to load event entity with ".$event_year." and ".$event_name;
    $event_to_cache = events_load_event_entity($event_year,$event_name);

    // Saving loaded Entity to CACHE
    $cache->set($event_cache_key, $event_to_cache, CacheBackendInterface::CACHE_PERMANENT, array($event_cache_key));

    $event_cache_data = $event_to_cache;
  }
  return $event_cache_data;
}

function events_load_event_entity($event_year,$event_name){
  // Load entity with ".$event_year." and ".$event_name;
  if(isset($event_year) && isset($event_name)){
    $entity_name = 'event_entity';
    $query = \Drupal::entityQuery($entity_name);
    $query->condition('event_title', $event_year . '-' . $event_name);
    $event_id = $query->execute();
    $query_store = \Drupal::entityManager()->getStorage($entity_name);
    $id = array_shift($event_id);
    return empty($id) ? null : $query_store->load($id);
  } else { return null; }
}

function events_get_terms($vid){
  $query = \Drupal::entityQuery('taxonomy_term');
      $query->condition('vid', $vid);
      $tids = $query->execute();
      $terms = \Drupal\taxonomy\Entity\Term::loadMultiple($tids);
  $options = array();
  foreach($terms as $term){
    $options[$term->name->value] = $term->name->value;
  }
  return $options;
}

function events_data_masseuse($obj){
  $data = array();
  foreach($obj as $k => $item){
    is_array($item) ? $data[$k] = $item : $data[$k] = $item->value;
  }
  return $data;
}

function events_get_event_defaults(){
  // Loading event defaults;
  $cache = \Drupal::cache('events_cache');
  // Get DEFAULTS_CACHE
  if($event_default_cache = $cache->get('defaults_cache')) { // Check & Get Event Default CACHE
    $event_defaults_data = $event_default_cache->data;
  } else { // NO DEFAULTS_CACHE
    // Get DEFAULTS_CACHE DB Table
    $query = \Drupal::database()->select('event_defaults', 'ed');
    $query->fields('ed',['eid','event_name','default_year','url_slug']);
    $defaults = $query->execute()->fetchAll();

    // Set DEFAULTS_CACHE DB data in CACHE
    $cache->set('defaults_cache', $defaults, CacheBackendInterface::CACHE_PERMANENT, array('defaults_cache'));
    $event_default_cache = $cache->get("defaults_cache");
    $event_defaults_data = $event_default_cache->data;
  }
  return $event_defaults_data;
}

function events_defaults_event_by_slug($defaults_data, $slug){
  if(isset($defaults_data) && isset($slug)){
    $event = null;
    foreach($defaults_data as $obj) {
      if($slug == $obj->url_slug) {
        $event = $obj;
        break;
      }
    }
    return $event;
  } else {
    return null;
  }
}

function events_get_years(){
  $cache = \Drupal::cache('events_cache');
  if($cached_years = $cache->get("event_years_list")){
    $years_data = $cached_years->data;
  }else{
    $event_years = array_values(events_get_terms('event_year'));
    $cache->set('event_years_list', $event_years, CacheBackendInterface::CACHE_PERMANENT, array('event_years_list'));
    $cached_years = $cache->get("event_years_list");
    $years_data = $cached_years->data;
  }
  return $years_data;
}

function events_verify_slugs($slugs){
  $verified_slugs = array();
  $years_data = events_get_years();

  $slug_a = (isset($slugs[1]) ?  preg_replace("/[\s_]/", "-", htmlentities($slugs[1])) : null);
  $slug_b = (isset($slugs[2]) ?  preg_replace("/[\s_]/", "-", htmlentities($slugs[2])) : null);

  $valid_year = false;
  if(is_numeric($slug_a) && strlen($slug_a) == 4){
    if(in_array($slug_a,$years_data)){
      // year_slug is successfull
      $valid_year = true;
    }
  }

  if($valid_year){
    $year_slug = $slug_a;
    $event_slug = $slug_b;
  } else {
    $year_slug = null;
    $event_slug = $slug_a;
  }

  // // Check if url_slug is valid
  // $verified_url_slug = events_defaults_event_by_slug(events_get_event_defaults(), $event_slug);
  // $event_slug = isset($verified_url_slug) ? $event_slug : null;
  $verified_slugs['year_slug'] = $year_slug;
  $verified_slugs['event_slug'] = $event_slug;
  return $verified_slugs;
}
